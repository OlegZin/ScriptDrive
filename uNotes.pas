unit uNotes;
interface

implementation

end.

{
  сюжет
    саписки в башне сделал сам ГГ, который решился на эксперимент, пытаясь
    прорвать магический барьер. это было необходимо, чтобы Темный Мастер не
    смог его засеч и помешать. свои воспоминания перед экспериментом ГГ заключил
    в радужные осколки и рассеял по этажам башни. используя эти околки игрок поднимает
    сознательность и открывает все новые мысли-воспоминания, что дает ему подсказки
    в расшифровке дневника.
    Темный Мастер - одна из эпостасей ГГ, которая блокирует проход чужаков по Башне.
    Этих эпостасей много и каждая занята своими задачами. Они практически
    полностью самостоятельны однако на глубинном уровне связаны воедино и чувстивуют друг-друга.
    потеря памяти ГГ посзолила разрушить эту связь с остальными эпостасями и стать "невидимым"
    шпионом в Башне.
    Башня - однонаправленная структура, ведущая к главной цели. Все эпостаси ГГ
    пытаются не допустить никого к этой цели. Каждая по-своему. Поскольку, это
    подсознательные сущности ГГ, лежащего в коме. И в таком состоянии им очень комфортно.
    По сути, ГГ - основная личность, которая по Башне (нервам позвоночника) пытается
    добраться до вершины(мозга) и вернуть сознание.
    По пути наверх, будут встречаться ответвления в виде небольших "миров" не похожих
    друг на друга. Каждый из них основан на одном из ключевых воспоминаний ГГ.
    И в каждом мире есть темная эпостась, которая пытается его разрушить.
    Победив ее и очистив мир, ГГ получает массу воспоминганий и бОльшую силу, что позволяет
    подниматься все выше к главной цели - победить в финале Темного Мастера башни и вернуться
    в сознание.
    Игра заканчивается сценой выхода из комы.

    Дневник - законы внутреннего подсознательного мира.
    Радужные осколки - части сознания и реальные воспоминания.
    Темный мастер - самая сильная подсознательная личность
    ГГ - основне сознание
    Миры - фантазии на основе реальных воспоминаний
    Барьеры в Башне - переломы позвоночника


   БОЕВКА в башне

   Элементы окна:
      - имя монстра
      - картинка монстра
      - параметры монстра
      - способности монстра
      - способности игрока
      - бонусы

--- Имя монстра ---
   Генерится случайно на текущем выбранном языке

--- Картинка монстра ---
   Выбирается случайно для рядовых монстров и конкретная для уникальных.
   Кликабельна. Клик по ней - обычная атака.
   Автоатака так же считается обычной атакой.

--- Параметры монстра ---
   Здоровье
       простое количество хитов. если нулевое, монстр побежден и игрок получает лут и опыт.
   Мана
       используется для активации заряженых способностей (и скилов игроком)
   Атака
       базовый физический урон. при атаке для вычисления повреждений берется рандом от 0 до значения атаки.
       может быть отрицательным, что начинает лечить противника
   Защита
       базовая физическая защита. каждая единица = 0.1% снижения входящего урона. может быть отрицательным
   Магзащита
       базовая магическая/энергетическая защита. каждая единица = 0.1% снижения силы эффекта.
       может быть отрицательным, что увеличивает эффект воздействия.
       магическими считаются почти все способности.
       и да, сопротивлении магии влияет и на положительные эффекты. например, на лечение
   Реген
       количество перекачки за тик. например, при регенерации здоровья из пула регена.
       дополнительно для монстра - количество единиц получаемого заряда на его способности

--- Способности монстра ---
   работают подобно способностям игрока, но все являются автоматически срабатывающими или пассивными.
   после каждой атаки монстра, согласно регену, по ним случайно распределяются заряды. требуемые типы не имеют значения.
   (как вариант: берутся из присутствующих на данный момент бонусов и тип имеет значение. но это сложно. нужен типа интеллект выбора)
   могут быть целью способностей и эффектов игрока: например блокировка, снятие зарядов и т.п.

--- Способности игрока ---
   В зависимости от уровня навыка Боя, имеется некоторое количество слотов под способности в бою.
   Состав способностей выбирается прямо в бою "на горячую": игрок кликает по слоту и выбирает способность из доступных.
   Она появляется в слоте без зарядов (замещает, если слот не был пустым). Данная смена считается действием.
   Заряд получается климом на одном из присутствующем в бою бонусе. Кадый бонус имеет определенный тип.
   Для зарядки способности требуется набрать определенное количество зарядов определенных типов.
   Очередность набора зарядов должна соблюдаться.
   Например, есть способность с зарядами: A B c c a, где A и B - уже заряженные элементы
   Чтобы продолжить зарядку, требуется дождаться и кликнуть по бонусу типа С.
   Если при взятии бонуса его тип требуется для зарядки несколькими способностями - заряжается каждая.
   После зарядки, способность может быть активирована, если может быть уплачена стоимость активации в мане.
   Типы активации:
       автоматическая - срабатывает в момент зарядки (достаточно заряда и маны)
       активируемая - кликом игрока, если достаточно заряда и маны
       триггер - срабатывает по условию, если достаточно заряда и маны
   Тип оплаты эффекта:
       разряд - списывается мана и весь заряд для активации. после чего начинается перезарядка. расходный эффект
       заряд - заряд остается и списывается только мана.
               по сути, разовый особо сильный эффект-ульта (если не будет внешнего эффекта снятия заряда)
   Тип работы:
       мгновенный - разовый эффект
       постоянный - действует, пока есть заряд (мана требуется только на активацию)
       временный - действует определенное количество времени
   Тип эффекта:
       статичный - зависит от текущей ситуации в момент срабатывания (уровня способности, внешнего фактора).
                   например, сила хила зависит от уровня способности и наложенных эффектов усиления прироста здоровья
       динамичный - в каждый момент времени, пока существует, может варьировать эффект, в зависимости от внешних условий.
                   например, сила бафа защиты сильнее, если здоровье снижается.

   эффекты могут быть совершенно разнообразными и комплексными.
   например: огненный шар по игроку и замена этой способности на другую (эволюция)

=== КЛЮЧЕВЫЕ МЕТОДЫ, ПОРОЖДАЮЩИЕ СОБЫТИЯ =====
[PlayerAttack] - взаимная атака игрока и монтра в башне
[ProcessAuto] - запуск автоматических событий по таймеру
[ProcessState] - проверка состояния игры и изменение

=== АЛГОРИТМ БОЯ =====
--- начало боя --
   ВХОДИМ НА УРОВЕНЬ
     инициализируются и переменные
     fl_FLOOR, fl_STEP

     вызываются событие входа
     (!) onFloorEnter
     сдесь отыгрываются скрипты, например, этажных построек с возможностью переместиться
     на другой этаж

   ПРИМЕНЕНИЕ ПАРАМЕТРОВ ЭТАЖА
     значение переменных fl_ХХХ принимаются в работу

   ГЕНЕРИТСЯ МОНСТР
     (!) onMonsterCreate
         согласно правилам:
         - рядовой, если не последний шаг
         - минибосс, если последний шаг
         - босс уровня, если активирован портал и минибосс побежден, а босс уровня еще не создан.
           его фишка в том, что он сохраняет свое состояние на момент окончания боя.
           но во время боя он получает опыт и может левелапаться, что делает бой еще
           сложнее, если не получилось с первого раза

     перед событием обновляются переменные с параметрами монстра, которые он получит
     после отыгрыша onMonsterCreate:
     mc_IMG, mc_NAME, mc_HP, mc_MP, mc_ATK, mc_DEF, mc_MDEF, mc_REG,
     mc_SKL1, mc_SKL2, mc_SKL3, mc_SKL4, mc_SKL5, mc_SKL6,
     mc_SKL1_lvl, mc_SKL2_lvl, mc_SKL3_lvl, mc_SKL4_lvl, mc_SKL5_lvl, mc_SKL6_lvl,
     mc_SKL1_chrg, mc_SKL2_chrg, mc_SKL3_chrg, mc_SKL4_chrg, mc_SKL5_chrg, mc_SKL6_chrg,

   ЗАПОНЯЕТСЯ ССЫЛКА НА МОНСТРА, С КОТОРЫМ БУДЕМ БИТЬСЯ
     текущими значениями переменных mc_ХХХ генерится монстр

   СОБЫТИЕ НАЧАЛО БОЯ
   (!) onFightBegin

   СОБЫТИЕ НАЧАЛО АТАКИ
   (!) onBeforeAction
     mc_DMG, - выкинутый монстром урон
     mc_BLC, - вычисленная величина блока урона от игрока
     mc_GMS, - количество полученных монстром кристаллов
     pl_DMG, - вычисленный урон игрока по монстру
     pl_BLC, - вычисленная величина блока урона от монстра
     gm_RED - количество выпавших из монстра красных кристаллов
     gm_WHT - количество выпавших из монстра белых кристаллов
     gm_BLU - количество выпавших из монстра синих кристаллов
     gm_GRN - количество выпавших из монстра зеленых кристаллов
     gm_PRP - количество выпавших из монстра фиолетовых кристаллов
     gm_YLW - количество выпавших из монстра желтых кристаллов

   ОЖИДАНИЕ ДЕЙСТВИЯ ИГРОКА / АВТОДЕЙСТВИЕ
      при этом он может свободно действовать в других режимах.
      однако, есть паралаельный метод [ProcessAuto], который не считается дейстивем и
      может вызываться в процессе ожидания. На него можно навесить регенерацию, к примеру

      - простая атака.
        вызывается после метода [PlayerAttack]
        возможность модифицировать все данные, инициализированные на
     (!) onPlayerAttack
        после вызова применяется нанесение дамага игроку и монстру

      - использование способности
        вызывается после метода [PlayerUseSkill]
        устанавливаются переменные:
        us_NAME - внутреннее имя использованного скила
        us_LEVEL - уровень использования скила
        us_POWER = 1 - модификатор эффекта
     (!) onPlayerUseSkill
        после отыгрыша события применяется эффект с именем us_NAME,
        уровнем us_LEVEL и модификатором эффективности us_POWER.
        т.е. можно как подменить скилл, так и уровень и усилить или
        ослабить эффект, вплоть до блока при us_POWER = 0

      - использование зелья
        вызывается после метода [PlayerUseItem]
        устанавливаются переменные:
        ui_NAME - внутреннее имя использованного скила
        ui_POWER = 1 - модификатор эффекта
     (!) onPlayerUseItem
        после отыгрыша события применяется эффект предмета с именем ui_NAME
        и модификатором эффективности ui_POWER.
        т.е. можно как подменить предмет, так и усилить или
        ослабить эффект, вплоть до блока при ui_POWER = 0

     - автоматическое действие
        вызывается после метода [ProcessAuto]
     (!) onTick
        не считается действием и не завершает цикл


   ЗАРЯДКА СПОСОБНОСТИ МОНСТРА
       на каждую способность монстра, получающую заряд, вызывается данное событие.
       устанавливаются переменные:
       msc_NAME - внутреннее имя заряжаемого скила
       msc_COUNT - количество получаемого заряда скилом (часть от общего количества mc_GMS)
       msc_MAX - максимальное требуемое количество для полного заряда скила
   (!) onMonsterSkillCharge

   ОТЫГРЫШ СПОСОБНОСТИ МОНСТРА
       для каждой сработавшей способности монстра вызывается это событие
       устанавливаются переменные:
       msu_NAME - внутреннее имя использованного скила
       msu_POWER = 1 - модификатор эффекта
   (!) onMonsterSkillUse
       после события применяется эффект скила со значением силы

   ОТЫГРЫШ ОКОНЧАНИЯ СОБЫТИЯ (цикла боя)
   (!) onAfterAction
       для эффектов, которые должны сработать после любого действия игрока

=== МЕХАНИЗМ СКРИПТОВ ===
--- Структура ---
{
}

}


